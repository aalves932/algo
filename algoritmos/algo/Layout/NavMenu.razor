@inject IJSRuntime JSRuntime

<div class="flex items-center top-row justify-between bg-slate-900 dark:bg-black text-stone-300 dark:text-stone-100 ">
    <div class="flex ml-4">
        <button @onclick="ToggleDarkMode" class="bi material-symbols-outlined text-sky-500">
            @iconTheme
        </button>
        <a class="text-lg text-[#0ca6e8ff]" href="">Algoritmos</a>
    </div>

    <button title="Navigation menu" class="nav-hamburger material-symbols-outlined mr-5" @onclick="ToggleNavMenu">
        menu
    </button>
</div>

<div class="@NavMenuCssClass nav-scrollable bg-slate-900 dark:bg-black">
    <nav class="flex-column">

        <div class="nav-item px-3" @onclick="ToggleNavMenu"> <!-- HOME -->
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi material-symbols-outlined" aria-hidden="true">home</span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3"> <!-- Blazor Templates -->

            <a class="nav-link" role="button" @onclick="(e) => ToggleSubMenu(e, 1)">
                <span class="bi material-symbols-outlined">construction</span>
                Blazor Template
                <span class="bi material-symbols-outlined">@iconBlazorTemplateMenu</span>
            </a>

            <div class="@BlazorTemplateMenuCssClass"> <!------  SUB MENU ITEMS ------->
                <nav class="nav flex-column ms-3" @onclick="ToggleNavMenu">

                    <NavLink class="nav-link" href="counter"> <!-- contador -->
                        <span class="bi material-symbols-outlined">add_circle</span>
                        Contador
                    </NavLink>

                    <NavLink class="nav-link" href="weather"> <!-- Clima -->
                        <span class="bi material-symbols-outlined">partly_cloudy_day</span>
                        Tempo
                    </NavLink>

                </nav>
            </div>
        </div>

        <div class="nav-item px-3"> <!-- Design -->
    
            <a class="nav-link " role="button" @onclick="(e) => ToggleSubMenu(e, 2)">
                <span class="bi material-symbols-outlined">code_blocks</span>
                Design
                <span class="bi material-symbols-outlined">@iconDesignMenu</span>
            </a>

            <div class="@DesignMenuCssClass">
                <nav class="nav flex-column ms-3" @onclick="ToggleNavMenu">
                    <NavLink class="nav-link " href="tailwind"> <!-- tailwind tips -->
                        <span class="bi bi-tailwind-nav-menu" aria-hidden="true"></span>
                        Tailwind Tips
                    </NavLink>

                    <NavLink class="nav-link" href="counter"> <!-- contador -->
                        <span class="bi material-symbols-outlined">add_circle</span>
                        Contador
                    </NavLink>

                    <NavLink class="nav-link" href="weather"> <!-- Clima -->
                        Tempo
                    </NavLink>

                </nav>
            </div>
        </div>

        <div class="nav-item px-3" @onclick="ToggleNavMenu"> <!-- habilitacao -->
            <NavLink class="nav-link" href="habilitacao">
                <span class="bi material-symbols-outlined">confirmation_number</span>
                Habilitação
            </NavLink>
        </div>

        <div class="nav-item px-3" @onclick="ToggleNavMenu"> <!-- byte_calc -->
            <NavLink class="nav-link" href="byte_calc">
                <span class="bi material-symbols-outlined">calculate</span>
                Calculadora de Bytes
            </NavLink>
        </div>

        <div class="nav-item px-3" @onclick="ToggleNavMenu"> <!-- DDD -->
            <NavLink class="nav-link" href="ddd">
                <span class="bi material-symbols-outlined">settings_phone</span>
                DDD
            </NavLink>
        </div>

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private bool isDarkMode = true;
    private string iconTheme => isDarkMode ? "night_sight_max" : "sunny"; // Texto dinâmico do botão

    private bool collapseBlazorTemplateMenu = true; // Adicionado para controle do novo submenu
    private string iconBlazorTemplateMenu => collapseBlazorTemplateMenu ? "arrow_drop_down" : "arrow_drop_up";
    private string? BlazorTemplateMenuCssClass => collapseBlazorTemplateMenu ? "d-none" : null;
    private bool collapseDesignMenu = true; // Adicionado para controle do novo submenu
    private string iconDesignMenu => collapseDesignMenu ? "arrow_drop_down" : "arrow_drop_up";
    private string? DesignMenuCssClass => collapseDesignMenu ? "d-none" : null; // Para controle do CSS do submenu


    private void ToggleSubMenu(MouseEventArgs e, int id)
    {
        Action acao = id switch
        {
            1 => () => { collapseBlazorTemplateMenu = !collapseBlazorTemplateMenu; }
            ,
            2 => () => { collapseDesignMenu = !collapseDesignMenu; }
            ,
            _ => () => Console.WriteLine("Opção desconhecida.")
        };

        acao.Invoke();

    }
    private void ToggleNavMenu()
    {

        collapseNavMenu = !collapseNavMenu;
    }
    private async Task ToggleDarkMode(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("toggleDarkMode");
        isDarkMode = !isDarkMode;
        StateHasChanged(); // Força a UI a atualizar

    }
}
